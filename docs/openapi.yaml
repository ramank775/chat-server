openapi: 3.1.0
info:
  title: Vartalap
  description: >-
    [Vartalap](https://vartalap.one9x.org/) is an open source personal chat
    application. It is design to provide the level of transparency in the
    personal messaging application with your data.


    This is a API documentation of the Vartalap.


    For Authorization always set the following headers


    ``` plaintext

    accesskey= # Authentication token as response of login api

    user= # Authenticated username

    ```
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
components:
  securitySchemes:
    apikeyAuth:
      type: http
      scheme: apikey
security:
  - apikeyAuth: []
tags:
  - name: v1.0
  - name: v1.0 > Auth
    description: Authentication endpoints
  - name: v1.0 > Profile
    description: User Profile Endpoints
  - name: v1.0 > Gateway
    description: >-
      Web socket and HTTP Gateway


      As postman doesn't yet support adding web socket request in normal
      collection.


      Endpoint: `wss://{{hostname}}/wss`
  - name: v1.0 > Group
    description: Endpoints for performing group related actions
  - name: v1.0 > Assets
    description: File service endpoint to upload and download files
  - name: v1.0 > Contact Book
paths:
  /v1.0/login:
    post:
      tags:
        - v1.0 > Auth
      summary: Login With Firebase
      description: Authenticate with Firebase such as Phone Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: '{{username}}'
                notificationToken: fcm token
      parameters:
        - name: token
          in: header
          schema:
            type: string
          description: Firebase auth token
          example: '{{firebase_auth_token}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/profile/:
    get:
      tags:
        - v1.0 > Profile
      summary: Get Profile
      description: Get User profile
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/messages:
    post:
      tags:
        - v1.0 > Gateway
      summary: Send Message
      description: Http endpoint to send messages
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                - _v: 2
                  id: string
                  head:
                    type: chat|group|channel|bot|notification
                    to: username|group_id|channel_id|bot_id
                    from: username
                    chatid: chatid
                    contentType: json|text|video|audio|location|form
                    action: >-
                      message|ack|subscribe|unsubscribe|join|leave|create|add-member|remove-member
                  meta:
                    hash: md5:hash
                    content_hash: md5:hash
                    generate_ts: 123455667890
                  body:
                    text: Hello this a text message
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/groups/:
    get:
      tags:
        - v1.0 > Group
      summary: Get All Groups
      description: Get All the groups user have access to
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - v1.0 > Group
      summary: Create New Group
      description: Create new group chat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Group Name/Title
                profilePic: profile-pic-id
                members:
                  - member_1_username
                  - member_2_username
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/groups/{groupId}:
    get:
      tags:
        - v1.0 > Group
      summary: Get Group Info
      description: Get group chat information including name, display pic, members
      parameters:
        - name: groupId
          in: path
          schema:
            type: string
          required: true
          example: e3dbe14f-c8da-4436-b912-da059098c6a5
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/groups/{groupId}/members:
    post:
      tags:
        - v1.0 > Group
      summary: Add Members to Group
      description: Add members to existing group chat
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                members:
                  - member_3_username
                  - member_4_username
      parameters:
        - name: groupId
          in: path
          schema:
            type: string
          required: true
          example: e3dbe14f-c8da-4436-b912-da059098c6a5
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - v1.0 > Group
      summary: Remove Member From Group
      description: >-
        Remove other members only valid if you have admin permission or Leave
        group chat.
      parameters:
        - name: groupId
          in: path
          schema:
            type: string
          required: true
          example: e3dbe14f-c8da-4436-b912-da059098c6a5
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/assets/upload/presigned_url:
    get:
      tags:
        - v1.0 > Assets
      summary: Generate Presigned URL for upload
      parameters:
        - name: ext
          in: query
          schema:
            type: string
          example: .png
        - name: category
          in: query
          schema:
            type: string
          example: chat
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/assets/download/{assetId}/presigned_url:
    get:
      tags:
        - v1.0 > Assets
      summary: Get Presigned Url to download assets
      parameters:
        - name: assetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/assets/{assetId}/status:
    put:
      tags:
        - v1.0 > Assets
      summary: Update Asset Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                status: true
      parameters:
        - name: assetId
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1.0/contactbook/sync:
    post:
      tags:
        - v1.0 > Contact Book
      summary: Sync Contact
      description: Sync contact book, to fetch list of users using this service
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                users:
                  - username_1
                  - username_2
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
